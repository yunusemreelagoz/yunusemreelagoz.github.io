{"version":3,"sources":["lib/matrix.js","lib/nn.js","App.js","serviceWorker.js","index.js"],"names":["Matrix","rows","cols","this","data","Array","fill","map","m","i","j","arr","push","e","Math","random","n","console","log","func","val","table","JSON","stringify","length","a","b","_","matrix","sum","k","parse","ActivationFunction","dfunc","sigmoid","x","exp","y","NeuralNetwork","tanh","in_nodes","hid_nodes","out_nodes","input_nodes","hidden_nodes","output_nodes","weights_ih","copy","weights_ho","bias_h","bias_o","randomize","setLearningRate","setActivationFunction","input_array","inputs","fromArray","hidden","multiply","add","activation_function","output","toArray","learning_rate","target_array","outputs","targets","output_errors","subtract","gradients","hidden_T","transpose","weight_ho_deltas","who_t","hidden_errors","hidden_gradient","inputs_T","weight_ih_deltas","nn","deserialize","HEIGHT","WIDTH","MIN_PIPE_HEIGHT","PIPE_WIDTH","FPS","MAXFRAMECOUNT","Bird","ctx","brain","mutate","mutated","gravity","velocity","frameCount","fillStyle","beginPath","arc","PI","pipeX","spaceStartY","spaceEndY","isDead","think","toFixed","result","predict","jump","Pipe","height","space","width","round","fillRect","App","props","getCtx","canvasRef","current","getContext","generatePipes","firstPipe","secondPipeHeight","gameLoop","update","draw","pipes","birds","generateNewGeneration","forEach","pipe","filter","smartestBird","bird","nextPipe","getNextPipe","isGameOver","clearInterval","loop","alert","gameOver","clearRect","fillText","generationCount","React","createRef","generateBirds","setInterval","bbb","undefined","className","ref","style","marginTop","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b29af18c.chunk.js","sourcesContent":["// let m = new Matrix(3,2);\r\n\r\nexport  class Matrix {\r\n  constructor(rows, cols) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.data = Array(this.rows)\r\n      .fill()\r\n      .map(() => Array(this.cols).fill(0));\r\n  }\r\n\r\n  copy() {\r\n    let m = new Matrix(this.rows, this.cols);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        m.data[i][j] = this.data[i][j];\r\n      }\r\n    }\r\n    return m;\r\n  }\r\n\r\n  static fromArray(arr) {\r\n    return new Matrix(arr.length, 1).map((e, i) => arr[i]);\r\n  }\r\n\r\n  static subtract(a, b) {\r\n    if (a.rows !== b.rows || a.cols !== b.cols) {\r\n      console.log(\"Columns and Rows of A must match Columns and Rows of B.\");\r\n      return;\r\n    }\r\n\r\n    // Return a new Matrix a-b\r\n    return new Matrix(a.rows, a.cols).map(\r\n      (_, i, j) => a.data[i][j] - b.data[i][j]\r\n    );\r\n  }\r\n\r\n  toArray() {\r\n    let arr = [];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        arr.push(this.data[i][j]);\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  randomize() {\r\n    return this.map(e => Math.random() * 2 - 1);\r\n  }\r\n\r\n  add(n) {\r\n    if (n instanceof Matrix) {\r\n      if (this.rows !== n.rows || this.cols !== n.cols) {\r\n        console.log(\"Columns and Rows of A must match Columns and Rows of B.\");\r\n        return;\r\n      }\r\n      return this.map((e, i, j) => e + n.data[i][j]);\r\n    } else {\r\n      return this.map(e => e + n);\r\n    }\r\n  }\r\n\r\n  static transpose(matrix) {\r\n    return new Matrix(matrix.cols, matrix.rows).map(\r\n      (_, i, j) => matrix.data[j][i]\r\n    );\r\n  }\r\n\r\n  static multiply(a, b) {\r\n    // Matrix product\r\n    if (a.cols !== b.rows) {\r\n      console.log(\"Columns of A must match rows of B.\");\r\n      return;\r\n    }\r\n\r\n    return new Matrix(a.rows, b.cols).map((e, i, j) => {\r\n      // Dot product of values in col\r\n      let sum = 0;\r\n      for (let k = 0; k < a.cols; k++) {\r\n        sum += a.data[i][k] * b.data[k][j];\r\n      }\r\n      return sum;\r\n    });\r\n  }\r\n\r\n  multiply(n) {\r\n    if (n instanceof Matrix) {\r\n      if (this.rows !== n.rows || this.cols !== n.cols) {\r\n        console.log(\"Columns and Rows of A must match Columns and Rows of B.\");\r\n        return;\r\n      }\r\n\r\n      // hadamard product\r\n      return this.map((e, i, j) => e * n.data[i][j]);\r\n    } else {\r\n      // Scalar product\r\n      return this.map(e => e * n);\r\n    }\r\n  }\r\n\r\n  map(func) {\r\n    // Apply a function to every element of matrix\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        let val = this.data[i][j];\r\n        this.data[i][j] = func(val, i, j);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static map(matrix, func) {\r\n    // Apply a function to every element of matrix\r\n    return new Matrix(matrix.rows, matrix.cols).map((e, i, j) =>\r\n      func(matrix.data[i][j], i, j)\r\n    );\r\n  }\r\n\r\n  print() {\r\n    console.table(this.data);\r\n    return this;\r\n  }\r\n\r\n  serialize() {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  static deserialize(data) {\r\n    if (typeof data == \"string\") {\r\n      data = JSON.parse(data);\r\n    }\r\n    let matrix = new Matrix(data.rows, data.cols);\r\n    matrix.data = data.data;\r\n    return matrix;\r\n  }\r\n}\r\n\r\n// if (typeof module !== \"undefined\") {\r\n//   module.exports = Matrix;\r\n// }\r\n","// Other techniques for learning\r\nimport { Matrix } from \"./matrix\";\r\nclass ActivationFunction {\r\n  constructor(func, dfunc) {\r\n    this.func = func;\r\n    this.dfunc = dfunc;\r\n  }\r\n}\r\n\r\nlet sigmoid = new ActivationFunction(\r\n  x => 1 / (1 + Math.exp(-x)),\r\n  y => y * (1 - y)\r\n);\r\n\r\nlet tanh = new ActivationFunction(\r\n  x => Math.tanh(x),\r\n  y => 1 - y * y\r\n);\r\n\r\nexport default class NeuralNetwork {\r\n  /*\r\n   * if first argument is a NeuralNetwork the constructor clones it\r\n   * USAGE: cloned_nn = new NeuralNetwork(to_clone_nn);\r\n   */\r\n  constructor(in_nodes, hid_nodes, out_nodes) {\r\n    if (in_nodes instanceof NeuralNetwork) {\r\n      let a = in_nodes;\r\n      this.input_nodes = a.input_nodes;\r\n      this.hidden_nodes = a.hidden_nodes;\r\n      this.output_nodes = a.output_nodes;\r\n\r\n      this.weights_ih = a.weights_ih.copy();\r\n      this.weights_ho = a.weights_ho.copy();\r\n\r\n      this.bias_h = a.bias_h.copy();\r\n      this.bias_o = a.bias_o.copy();\r\n    } else {\r\n      this.input_nodes = in_nodes;\r\n      this.hidden_nodes = hid_nodes;\r\n      this.output_nodes = out_nodes;\r\n\r\n      this.weights_ih = new Matrix(this.hidden_nodes, this.input_nodes);\r\n      this.weights_ho = new Matrix(this.output_nodes, this.hidden_nodes);\r\n      this.weights_ih.randomize();\r\n      this.weights_ho.randomize();\r\n\r\n      this.bias_h = new Matrix(this.hidden_nodes, 1);\r\n      this.bias_o = new Matrix(this.output_nodes, 1);\r\n      this.bias_h.randomize();\r\n      this.bias_o.randomize();\r\n    }\r\n\r\n    // TODO: copy these as well\r\n    this.setLearningRate();\r\n    this.setActivationFunction();\r\n  }\r\n\r\n  predict(input_array) {\r\n    // Generating the Hidden Outputs\r\n    let inputs = Matrix.fromArray(input_array);\r\n    let hidden = Matrix.multiply(this.weights_ih, inputs);\r\n    hidden.add(this.bias_h);\r\n    // activation function!\r\n    hidden.map(this.activation_function.func);\r\n\r\n    // Generating the output's output!\r\n    let output = Matrix.multiply(this.weights_ho, hidden);\r\n    output.add(this.bias_o);\r\n    output.map(this.activation_function.func);\r\n\r\n    // Sending back to the caller!\r\n    return output.toArray();\r\n  }\r\n\r\n  setLearningRate(learning_rate = 0.1) {\r\n    this.learning_rate = learning_rate;\r\n  }\r\n\r\n  setActivationFunction(func = sigmoid) {\r\n    this.activation_function = func;\r\n  }\r\n\r\n  train(input_array, target_array) {\r\n    // Generating the Hidden Outputs\r\n    let inputs = Matrix.fromArray(input_array);\r\n    let hidden = Matrix.multiply(this.weights_ih, inputs);\r\n    hidden.add(this.bias_h);\r\n    // activation function!\r\n    hidden.map(this.activation_function.func);\r\n\r\n    // Generating the output's output!\r\n    let outputs = Matrix.multiply(this.weights_ho, hidden);\r\n    outputs.add(this.bias_o);\r\n    outputs.map(this.activation_function.func);\r\n\r\n    // Convert array to matrix object\r\n    let targets = Matrix.fromArray(target_array);\r\n\r\n    // Calculate the error\r\n    // ERROR = TARGETS - OUTPUTS\r\n    let output_errors = Matrix.subtract(targets, outputs);\r\n\r\n    // let gradient = outputs * (1 - outputs);\r\n    // Calculate gradient\r\n    let gradients = Matrix.map(outputs, this.activation_function.dfunc);\r\n    gradients.multiply(output_errors);\r\n    gradients.multiply(this.learning_rate);\r\n\r\n    // Calculate deltas\r\n    let hidden_T = Matrix.transpose(hidden);\r\n    let weight_ho_deltas = Matrix.multiply(gradients, hidden_T);\r\n\r\n    // Adjust the weights by deltas\r\n    this.weights_ho.add(weight_ho_deltas);\r\n    // Adjust the bias by its deltas (which is just the gradients)\r\n    this.bias_o.add(gradients);\r\n\r\n    // Calculate the hidden layer errors\r\n    let who_t = Matrix.transpose(this.weights_ho);\r\n    let hidden_errors = Matrix.multiply(who_t, output_errors);\r\n\r\n    // Calculate hidden gradient\r\n    let hidden_gradient = Matrix.map(hidden, this.activation_function.dfunc);\r\n    hidden_gradient.multiply(hidden_errors);\r\n    hidden_gradient.multiply(this.learning_rate);\r\n\r\n    // Calcuate input->hidden deltas\r\n    let inputs_T = Matrix.transpose(inputs);\r\n    let weight_ih_deltas = Matrix.multiply(hidden_gradient, inputs_T);\r\n\r\n    this.weights_ih.add(weight_ih_deltas);\r\n    // Adjust the bias by its deltas (which is just the gradients)\r\n    this.bias_h.add(hidden_gradient);\r\n\r\n    // outputs.print();\r\n    // targets.print();\r\n    // error.print();\r\n  }\r\n\r\n  serialize() {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  static deserialize(data) {\r\n    if (typeof data == \"string\") {\r\n      data = JSON.parse(data);\r\n    }\r\n    let nn = new NeuralNetwork(\r\n      data.input_nodes,\r\n      data.hidden_nodes,\r\n      data.output_nodes\r\n    );\r\n    nn.weights_ih = Matrix.deserialize(data.weights_ih);\r\n    nn.weights_ho = Matrix.deserialize(data.weights_ho);\r\n    nn.bias_h = Matrix.deserialize(data.bias_h);\r\n    nn.bias_o = Matrix.deserialize(data.bias_o);\r\n    nn.learning_rate = data.learning_rate;\r\n    return nn;\r\n  }\r\n\r\n  // Adding function for neuro-evolution\r\n  copy() {\r\n    return new NeuralNetwork(this);\r\n  }\r\n\r\n  // Accept an arbitrary function for mutation\r\n  mutate(func) {\r\n    this.weights_ih.map(func);\r\n    this.weights_ho.map(func);\r\n    this.bias_h.map(func);\r\n    this.bias_o.map(func);\r\n  }\r\n}\r\n","/*gloabal document*/\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport NeuralNetwork from \"./lib/nn\";\nconst HEIGHT = 500;\nconst WIDTH = 800;\nconst MIN_PIPE_HEIGHT = 70;\nconst PIPE_WIDTH = 30;\nconst FPS = 240;\nconst BIRD_COUNT = 250;\nlet MAXFRAMECOUNT = 0;\n\nclass Bird {\n  constructor(ctx, brain) {\n    this.ctx = ctx;\n    this.x = 150;\n    this.y = 250;\n    this.gravity = 1;\n    this.velocity = 0.2;\n    this.frameCount = 0;\n    this.mutated = false;\n\n    if (brain instanceof NeuralNetwork) {\n      this.brain = brain.copy();\n      this.mutate();\n    } else {\n      this.brain = new NeuralNetwork(5, 5, 2);\n    }\n  }\n\n  mutate = () => {\n    this.brain.mutate(x => {\n      if (Math.random() < 0.1) {\n        this.mutated = true;\n        const offset = Math.random();\n        return x + offset;\n      }\n      return x;\n    });\n  };\n  draw() {\n    this.ctx.fillStyle = this.mutated ? \"green\" : \"black\";\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.y, 10, 0, 2 * Math.PI);\n    this.ctx.fill();\n  }\n  update(pipeX, spaceStartY, spaceEndY) {\n    this.frameCount += 1;\n    this.gravity += this.velocity;\n    if (this.gravity > 1) this.gravity = 1;\n    this.y += this.gravity;\n    if (this.y <= 0) {\n      this.y = 0;\n      this.isDead = true;\n    }\n    if (this.y >= HEIGHT) {\n      this.y = HEIGHT;\n      this.isDead = true;\n    }\n    this.think(pipeX, spaceStartY, spaceEndY);\n  }\n  jump(x) {\n    this.gravity = x;\n  }\n\n  think(pipeX, spaceStartY, spaceEndY) {\n    const inputs = [\n      ((pipeX - this.x) / (WIDTH - this.x)).toFixed(2),\n      (spaceStartY / HEIGHT).toFixed(2),\n      (spaceEndY / HEIGHT).toFixed(2),\n      (this.y / HEIGHT).toFixed(2),\n      (this.gravity / 3).toFixed(2)\n    ];\n\n    const result = this.brain.predict(inputs);\n    if (result[0] < result[1]) {\n      this.jump(-3);\n    }\n  }\n}\n\nclass Pipe {\n  constructor(ctx, height, space) {\n    this.ctx = ctx;\n    this.x = WIDTH;\n    this.y = height ? HEIGHT - height : 0;\n    this.width = PIPE_WIDTH;\n    this.height =\n      height ||\n      MIN_PIPE_HEIGHT +\n        Math.random() * Math.round(HEIGHT - (space + 2 * MIN_PIPE_HEIGHT));\n  }\n  draw() {\n    this.ctx.fillStyle = \"#000\";\n    this.ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n  update() {\n    this.x -= 1;\n    if (this.x + PIPE_WIDTH < 0) this.isDead = true;\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.space = 100;\n    this.frameCount = 0;\n    this.generationCount = 0;\n    this.pipes = [];\n    this.birds = [];\n  }\n  componentDidMount() {\n    //document.addEventListener(\"keydown\", this.onKeyDown);\n    const ctx = this.getCtx();\n    this.pipes = this.generatePipes();\n    this.birds = this.generateBirds(ctx);\n    this.loop = setInterval(this.gameLoop, 1000 / FPS);\n  }\n  // onKeyDown = e => {\n  //   if (this.birds[0] && e.code === \"Space\") {\n  //     this.birds[0].jump(-3);\n  //   }\n  // };\n\n  generateBirds(ctx) {\n    const bbb = [];\n    for (let i = 0; i < BIRD_COUNT; i++) {\n      let b = new Bird(\n        ctx,\n        this.smartestBird ? this.smartestBird.brain : undefined\n      );\n      bbb.push(b);\n    }\n    return bbb;\n  }\n\n  generateNewGeneration(ctx) {\n    this.generationCount += 1;\n    this.birds = this.generateBirds(ctx);\n  }\n\n  getCtx = () => this.canvasRef.current.getContext(\"2d\");\n\n  generatePipes = () => {\n    const ctx = this.getCtx();\n    const firstPipe = new Pipe(ctx, null, this.space);\n    const secondPipeHeight = HEIGHT - (firstPipe.height + this.space);\n    const secondPipe = new Pipe(ctx, secondPipeHeight, this.space);\n    return [firstPipe, secondPipe];\n  };\n  gameLoop = () => {\n    this.update();\n    this.draw();\n  };\n\n  update = () => {\n    this.frameCount = this.frameCount + 1;\n    if (this.frameCount % 400 === 0) {\n      const pipes = this.generatePipes();\n      this.pipes.push(...pipes);\n    }\n    if (this.birds.length === 0 && this.frameCount % 100 === 0) {\n      this.generateNewGeneration(this.getCtx());\n    }\n    this.pipes.forEach(pipe => pipe.x--);\n    this.pipes = this.pipes.filter(x => !x.isDead);\n\n    if (this.birds.length === this.birds.filter(x => x.isDead).length) {\n      if (this.birds[0] && this.birds[0].frameCount > MAXFRAMECOUNT) {\n        MAXFRAMECOUNT = this.birds[0].frameCount;\n        this.smartestBird = this.birds[0];\n      }\n    }\n    this.birds = this.birds.filter(x => !x.isDead);\n\n    if (this.birds.length > 0) {\n      if (this.birds[0].frameCount > MAXFRAMECOUNT) {\n        MAXFRAMECOUNT = this.birds[0].frameCount;\n        this.smartestBird = this.birds[0];\n      }\n    }\n    this.birds.forEach(bird => {\n      const nextPipe = this.getNextPipe(bird);\n      const spaceStartY = nextPipe.y + nextPipe.height;\n      bird.update(nextPipe.x, spaceStartY, spaceStartY + this.space);\n    });\n\n    if (this.isGameOver()) {\n      clearInterval(this.loop);\n      alert(\"GAME OVER\");\n    }\n  };\n\n  getNextPipe = bird => {\n    for (let i = 0; i < this.pipes.length; i++) {\n      if (this.pipes[i].x > bird.x) {\n        return this.pipes[i];\n      }\n    }\n  };\n\n  isGameOver = () => {\n    let gameOver = false;\n    this.birds.forEach(bird => {\n      this.pipes.forEach(pipe => {\n        if (\n          (bird.x > pipe.x &&\n            bird.x < pipe.x + pipe.width &&\n            bird.y > pipe.y &&\n            bird.y < pipe.y + pipe.height) ||\n          bird.y > HEIGHT ||\n          bird.y < 0\n        )\n          bird.isDead = true;\n        gameOver = false;\n      });\n    });\n    return gameOver;\n  };\n\n  draw = () => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n    this.pipes.forEach(pipe => pipe.draw());\n    this.birds.forEach(bird => bird.draw());\n    ctx.fillStyle = \"#000\";\n    ctx.fillText(`Nesil: ${this.generationCount}`, 15, 15);\n    ctx.fillText(`Kuş: ${this.birds.length}`, 15, 30);\n    ctx.fillText(`Score: ${(MAXFRAMECOUNT / FPS).toFixed(1)} sn`, 15, 45);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas\n          ref={this.canvasRef}\n          height={HEIGHT}\n          width={WIDTH}\n          style={{ marginTop: \"24px\", border: \"1px solid #c3c3c3\" }}\n        ></canvas>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}